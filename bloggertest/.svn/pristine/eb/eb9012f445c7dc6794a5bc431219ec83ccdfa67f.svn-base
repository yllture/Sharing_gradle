package com.neuedu.service;

import java.util.List;

import org.springframework.cache.annotation.CacheEvict;
import org.springframework.cache.annotation.Caching;

import com.neuedu.entity.Bank;
import com.neuedu.entity.Bank_fill;

public interface Bank_fillService {
	
	List<Bank_fill> getAllbyBankid(Bank bf);
	@Caching(evict={@CacheEvict(value="AllBankByuser", allEntries=true,beforeInvocation=true),
			@CacheEvict(value="AllBankByfolder", allEntries=true,beforeInvocation=true),
			@CacheEvict(value="AllBankKnowledge",key="'Knowledgelist_'+#bf.bankid"),
			@CacheEvict(value="BankByid",key="'Bank_'+#bf.bankid")
			})
	int addBank_fill(Bank_fill bf);
	
	@Caching(evict={@CacheEvict(value="AllBankByuser", allEntries=true,beforeInvocation=true),
			@CacheEvict(value="AllBankByfolder", allEntries=true,beforeInvocation=true),
			@CacheEvict(value="AllBankKnowledge", allEntries=true,beforeInvocation=true),
			@CacheEvict(value="BankByid",allEntries=true,beforeInvocation=true)
			})
	int updateBank_fill(Bank_fill bf);
	@Caching(evict={@CacheEvict(value="AllBankByuser", allEntries=true,beforeInvocation=true),
			@CacheEvict(value="AllBankByfolder", allEntries=true,beforeInvocation=true),
			@CacheEvict(value="AllBankKnowledge", allEntries=true,beforeInvocation=true),
			@CacheEvict(value="BankByid",allEntries=true,beforeInvocation=true)
			})
	int deleteBank_fill(Bank_fill bf);
	Bank_fill selectBank_fill(Bank_fill bf);
	

}
