<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.neuedu.dao.Garbage_bankMapper" >
  <resultMap id="BaseResultMap" type="com.neuedu.entity.Garbage_bank" >
    <id column="bankid" property="bankid" jdbcType="INTEGER" />
    <result column="bankname" property="bankname" jdbcType="VARCHAR" />
    <result column="bankdescription" property="bankdescription" jdbcType="VARCHAR" />
    <result column="banklabel" property="banklabel" jdbcType="VARCHAR" />
    <result column="userid" property="userid" jdbcType="INTEGER" />
    <result column="questionnum" property="questionnum" jdbcType="INTEGER" />
    <result column="singlenum" property="singlenum" jdbcType="INTEGER" />
    <result column="judgenum" property="judgenum" jdbcType="INTEGER" />
    <result column="multiplenum" property="multiplenum" jdbcType="INTEGER" />
    <result column="shortanswernum" property="shortanswernum" jdbcType="INTEGER" />
    <result column="fillnum" property="fillnum" jdbcType="INTEGER" />
    <result column="bankIcon" property="bankicon" jdbcType="VARCHAR" />
    <result column="folderid" property="folderid" jdbcType="INTEGER" />
    <result column="updatetime" property="updatetime" jdbcType="TIMESTAMP" />
    <result column="c3" property="c3" jdbcType="VARCHAR" />
    <result column="c4" property="c4" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    bankid, bankname, bankdescription, banklabel, userid, questionnum, singlenum, judgenum, 
    multiplenum, shortanswernum, fillnum, bankIcon, folderid, updatetime, c3, c4
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.neuedu.entity.Garbage_bankExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from garbage_bank
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from garbage_bank
    where bankid = #{bankid,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from garbage_bank
    where bankid = #{bankid,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.neuedu.entity.Garbage_bankExample" >
    delete from garbage_bank
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.neuedu.entity.Garbage_bank" >
    insert into garbage_bank (bankid, bankname, bankdescription, 
      banklabel, userid, questionnum, 
      singlenum, judgenum, multiplenum, 
      shortanswernum, fillnum, bankIcon, 
      folderid, updatetime, c3, 
      c4)
    values (#{bankid,jdbcType=INTEGER}, #{bankname,jdbcType=VARCHAR}, #{bankdescription,jdbcType=VARCHAR}, 
      #{banklabel,jdbcType=VARCHAR}, #{userid,jdbcType=INTEGER}, #{questionnum,jdbcType=INTEGER}, 
      #{singlenum,jdbcType=INTEGER}, #{judgenum,jdbcType=INTEGER}, #{multiplenum,jdbcType=INTEGER}, 
      #{shortanswernum,jdbcType=INTEGER}, #{fillnum,jdbcType=INTEGER}, #{bankicon,jdbcType=VARCHAR}, 
      #{folderid,jdbcType=INTEGER}, #{updatetime,jdbcType=TIMESTAMP}, #{c3,jdbcType=VARCHAR}, 
      #{c4,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.neuedu.entity.Garbage_bank" >
    insert into garbage_bank
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="bankid != null" >
        bankid,
      </if>
      <if test="bankname != null" >
        bankname,
      </if>
      <if test="bankdescription != null" >
        bankdescription,
      </if>
      <if test="banklabel != null" >
        banklabel,
      </if>
      <if test="userid != null" >
        userid,
      </if>
      <if test="questionnum != null" >
        questionnum,
      </if>
      <if test="singlenum != null" >
        singlenum,
      </if>
      <if test="judgenum != null" >
        judgenum,
      </if>
      <if test="multiplenum != null" >
        multiplenum,
      </if>
      <if test="shortanswernum != null" >
        shortanswernum,
      </if>
      <if test="fillnum != null" >
        fillnum,
      </if>
      <if test="bankicon != null" >
        bankIcon,
      </if>
      <if test="folderid != null" >
        folderid,
      </if>
      <if test="updatetime != null" >
        updatetime,
      </if>
      <if test="c3 != null" >
        c3,
      </if>
      <if test="c4 != null" >
        c4,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="bankid != null" >
        #{bankid,jdbcType=INTEGER},
      </if>
      <if test="bankname != null" >
        #{bankname,jdbcType=VARCHAR},
      </if>
      <if test="bankdescription != null" >
        #{bankdescription,jdbcType=VARCHAR},
      </if>
      <if test="banklabel != null" >
        #{banklabel,jdbcType=VARCHAR},
      </if>
      <if test="userid != null" >
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="questionnum != null" >
        #{questionnum,jdbcType=INTEGER},
      </if>
      <if test="singlenum != null" >
        #{singlenum,jdbcType=INTEGER},
      </if>
      <if test="judgenum != null" >
        #{judgenum,jdbcType=INTEGER},
      </if>
      <if test="multiplenum != null" >
        #{multiplenum,jdbcType=INTEGER},
      </if>
      <if test="shortanswernum != null" >
        #{shortanswernum,jdbcType=INTEGER},
      </if>
      <if test="fillnum != null" >
        #{fillnum,jdbcType=INTEGER},
      </if>
      <if test="bankicon != null" >
        #{bankicon,jdbcType=VARCHAR},
      </if>
      <if test="folderid != null" >
        #{folderid,jdbcType=INTEGER},
      </if>
      <if test="updatetime != null" >
        #{updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="c3 != null" >
        #{c3,jdbcType=VARCHAR},
      </if>
      <if test="c4 != null" >
        #{c4,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.neuedu.entity.Garbage_bankExample" resultType="java.lang.Integer" >
    select count(*) from garbage_bank
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update garbage_bank
    <set >
      <if test="record.bankid != null" >
        bankid = #{record.bankid,jdbcType=INTEGER},
      </if>
      <if test="record.bankname != null" >
        bankname = #{record.bankname,jdbcType=VARCHAR},
      </if>
      <if test="record.bankdescription != null" >
        bankdescription = #{record.bankdescription,jdbcType=VARCHAR},
      </if>
      <if test="record.banklabel != null" >
        banklabel = #{record.banklabel,jdbcType=VARCHAR},
      </if>
      <if test="record.userid != null" >
        userid = #{record.userid,jdbcType=INTEGER},
      </if>
      <if test="record.questionnum != null" >
        questionnum = #{record.questionnum,jdbcType=INTEGER},
      </if>
      <if test="record.singlenum != null" >
        singlenum = #{record.singlenum,jdbcType=INTEGER},
      </if>
      <if test="record.judgenum != null" >
        judgenum = #{record.judgenum,jdbcType=INTEGER},
      </if>
      <if test="record.multiplenum != null" >
        multiplenum = #{record.multiplenum,jdbcType=INTEGER},
      </if>
      <if test="record.shortanswernum != null" >
        shortanswernum = #{record.shortanswernum,jdbcType=INTEGER},
      </if>
      <if test="record.fillnum != null" >
        fillnum = #{record.fillnum,jdbcType=INTEGER},
      </if>
      <if test="record.bankicon != null" >
        bankIcon = #{record.bankicon,jdbcType=VARCHAR},
      </if>
      <if test="record.folderid != null" >
        folderid = #{record.folderid,jdbcType=INTEGER},
      </if>
      <if test="record.updatetime != null" >
        updatetime = #{record.updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.c3 != null" >
        c3 = #{record.c3,jdbcType=VARCHAR},
      </if>
      <if test="record.c4 != null" >
        c4 = #{record.c4,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update garbage_bank
    set bankid = #{record.bankid,jdbcType=INTEGER},
      bankname = #{record.bankname,jdbcType=VARCHAR},
      bankdescription = #{record.bankdescription,jdbcType=VARCHAR},
      banklabel = #{record.banklabel,jdbcType=VARCHAR},
      userid = #{record.userid,jdbcType=INTEGER},
      questionnum = #{record.questionnum,jdbcType=INTEGER},
      singlenum = #{record.singlenum,jdbcType=INTEGER},
      judgenum = #{record.judgenum,jdbcType=INTEGER},
      multiplenum = #{record.multiplenum,jdbcType=INTEGER},
      shortanswernum = #{record.shortanswernum,jdbcType=INTEGER},
      fillnum = #{record.fillnum,jdbcType=INTEGER},
      bankIcon = #{record.bankicon,jdbcType=VARCHAR},
      folderid = #{record.folderid,jdbcType=INTEGER},
      updatetime = #{record.updatetime,jdbcType=TIMESTAMP},
      c3 = #{record.c3,jdbcType=VARCHAR},
      c4 = #{record.c4,jdbcType=INTEGER}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.neuedu.entity.Garbage_bank" >
    update garbage_bank
    <set >
      <if test="bankname != null" >
        bankname = #{bankname,jdbcType=VARCHAR},
      </if>
      <if test="bankdescription != null" >
        bankdescription = #{bankdescription,jdbcType=VARCHAR},
      </if>
      <if test="banklabel != null" >
        banklabel = #{banklabel,jdbcType=VARCHAR},
      </if>
      <if test="userid != null" >
        userid = #{userid,jdbcType=INTEGER},
      </if>
      <if test="questionnum != null" >
        questionnum = #{questionnum,jdbcType=INTEGER},
      </if>
      <if test="singlenum != null" >
        singlenum = #{singlenum,jdbcType=INTEGER},
      </if>
      <if test="judgenum != null" >
        judgenum = #{judgenum,jdbcType=INTEGER},
      </if>
      <if test="multiplenum != null" >
        multiplenum = #{multiplenum,jdbcType=INTEGER},
      </if>
      <if test="shortanswernum != null" >
        shortanswernum = #{shortanswernum,jdbcType=INTEGER},
      </if>
      <if test="fillnum != null" >
        fillnum = #{fillnum,jdbcType=INTEGER},
      </if>
      <if test="bankicon != null" >
        bankIcon = #{bankicon,jdbcType=VARCHAR},
      </if>
      <if test="folderid != null" >
        folderid = #{folderid,jdbcType=INTEGER},
      </if>
      <if test="updatetime != null" >
        updatetime = #{updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="c3 != null" >
        c3 = #{c3,jdbcType=VARCHAR},
      </if>
      <if test="c4 != null" >
        c4 = #{c4,jdbcType=INTEGER},
      </if>
    </set>
    where bankid = #{bankid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.neuedu.entity.Garbage_bank" >
    update garbage_bank
    set bankname = #{bankname,jdbcType=VARCHAR},
      bankdescription = #{bankdescription,jdbcType=VARCHAR},
      banklabel = #{banklabel,jdbcType=VARCHAR},
      userid = #{userid,jdbcType=INTEGER},
      questionnum = #{questionnum,jdbcType=INTEGER},
      singlenum = #{singlenum,jdbcType=INTEGER},
      judgenum = #{judgenum,jdbcType=INTEGER},
      multiplenum = #{multiplenum,jdbcType=INTEGER},
      shortanswernum = #{shortanswernum,jdbcType=INTEGER},
      fillnum = #{fillnum,jdbcType=INTEGER},
      bankIcon = #{bankicon,jdbcType=VARCHAR},
      folderid = #{folderid,jdbcType=INTEGER},
      updatetime = #{updatetime,jdbcType=TIMESTAMP},
      c3 = #{c3,jdbcType=VARCHAR},
      c4 = #{c4,jdbcType=INTEGER}
    where bankid = #{bankid,jdbcType=INTEGER}
  </update>
  
   
   <select id="getAllByUserid" resultMap="BaseResultMap">
  	select * from garbage_bank where userid = #{userid} 
  </select>
  
  <select id="getAllByFolderid" resultMap="BaseResultMap">
  	select * from garbage_bank where folderid = #{folderid}
  </select>
</mapper>